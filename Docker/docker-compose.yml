#version: '3.8'

services:
  chromadb:
    image: chromadb/chroma:latest
    container_name: productdemo-chromadb
    ports:
      - "${CHROMADB_HOST_PORT:-8001}:${CHROMADB_CONTAINER_PORT:-8000}"
    volumes:
      - ./DATA/chroma_data:/chroma/chroma
    environment:
      - ALLOW_RESET=true
      - CHROMA_SERVER_CORS_ALLOW_ORIGINS=*
      - CHROMA_SERVER_HOST=0.0.0.0
      - CHROMA_SERVER_PORT=${CHROMADB_CONTAINER_PORT:-8000}
    restart: unless-stopped
    networks:
      - productdemo-network

  redis:
    image: redis:7-alpine
    container_name: productdemo-redis
    ports:
      - "${REDIS_HOST_PORT:-6379}:${REDIS_CONTAINER_PORT:-6379}"
    volumes:
      - redis_data:/data
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - productdemo-network

  embedding-service:
    build:
      context: ..
      dockerfile: Docker/Dockerfile.embedding-service
    network_mode: host
    environment:
      - NODE_ENV=production
      - EMBEDDING_SERVICE_PORT=3579
      - REDIS_HOST=localhost
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - OLLAMA_HOST=localhost
      - OLLAMA_PORT=11434
    volumes:
      - ../logs:/app/logs
      - ../conf:/app/conf
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 1  # Reduced to 1 for testing to avoid port conflicts
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3579/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  doc-workers:
    build:
      context: ..
      dockerfile: Docker/Dockerfile.workers
    container_name: productdemo-doc-workers
    network_mode: host
    env_file:
      - env.docker
    environment:
      - NODE_ENV=production
      - REDIS_HOST=localhost
      - REDIS_PORT=6379
      - DOC_WORKER_CONCURRENCY=3
      - QUEUE_MAX_RETRIES=3
      - CHROMADB_HOST=localhost
      - CHROMADB_PORT=8001
      - EMBEDDING_SERVICE_URL=http://localhost:3579
    extra_hosts:
      - "host.docker.internal:192.168.2.111"
    volumes:
      - ../DATA:/app/DATA
      - ../conf:/app/conf
      - ../logs:/app/logs
      - ../python:/app/python
    depends_on:
      redis:
        condition: service_healthy
      chromadb:
        condition: service_started
      embedding-service:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      replicas: 1
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  image-processor:
    build:
      context: ..
      dockerfile: Docker/Dockerfile.image-processor
    container_name: productdemo-image-processor
    env_file:
      - env.docker
    environment:
      - TESSDATA_PREFIX=/usr/share/tesseract-ocr/5/tessdata/
      - TESSERACT_CMD=/usr/bin/tesseract
      - PYTHONPATH=/app
    volumes:
      - ../DATA:/app/data
      - ../python/RAG-MODULE/image-processing:/app/image-processing
      - image_collections:/app/data/collections
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.5'
    networks:
      - productdemo-network

  chat2sql:
    build:
      context: ..
      dockerfile: Docker/Dockerfile.chat2sql
    container_name: productdemo-chat2sql
    ports:
      - "5000:5000"
    environment:
      # Python configuration only - no database overrides
      - PYTHONUNBUFFERED=1
    extra_hosts:
      - "host.docker.internal:192.168.2.111"
    networks:
      - productdemo-network
    depends_on:
      - redis
      - chromadb
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:5000/')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  redis_data:
    driver: local
  image_collections:
    driver: local

networks:
  productdemo-network:
    driver: bridge


