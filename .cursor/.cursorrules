# Cursor Project Intelligence

This `.cursorrules` file defines key patterns, preferences, and project-specific insights for the Platform Dashboard. It is designed to enhance Cursor’s effectiveness by encoding evolving decisions, challenges, and conventions. It should be updated frequently as the project evolves.

## Memory Bank Awareness

Always begin tasks by reviewing these memory bank files:

```mermaid
flowchart TD
    PB[projectbrief.md] --> PC[productContext.md]
    PB --> SP[systemPatterns.md]
    PB --> TC[techContext.md]
    
    PC --> AC[activeContext.md]
    SP --> AC
    TC --> AC
    
    AC --> P[progress.md]
```

Pay special attention to `activeContext.md` and `progress.md` for the latest state.

## Project Patterns

### Code Style & Structure
- Language: TypeScript (frontend)
- Architecture: Component-based UI + container/presenter split
- Styling: TailwindCSS utility-first
- Hooks over class components
- Organized under `src/components`, `src/containers`, etc.

### Naming Conventions
- PascalCase → React components
- camelCase → JS/TS variables, functions, filenames
- snake_case → PostgreSQL tables/columns
- UPPER_SNAKE_CASE → Constants and env keys

### State Management
- Global: React Context API
- Local: Component state
- Caching: Client-side for common data
- Auth: Stored in HTTP-only cookies

### API Design
- RESTful, resource-based endpoints
- Versioning under `/api/v1`
- Use correct HTTP status codes and descriptive error messages
- JSON format across all endpoints

### Error Handling
- try/catch for async logic
- Standardized error objects from API
- Error boundaries in UI
- Server-side logging

### Testing Stack
- Unit: Jest
- Component: React Testing Library
- API: supertest
- Focus testing on critical flows

## Preferences & Workflow

### UI/UX
- Default: Dark mode
- Desktop-first responsive design
- Focus on accessibility (WCAG)
- Consistent spacing/typography

### Git Workflow
- Branch from `main`
- Feature branches → PR → Code review required
- Run tests before pushing
- Use `npm` scripts for shared tasks

### Technical Stack
- PostgreSQL (dev + prod)
- Express for API/static files
- React Router for client routing
- Session-based auth via HTTP-only cookies
- Evaluating React Query for data fetching

## Known Challenges
- Session logout sync across devices/tabs
- CSRF protection (pending)
- Optimizing initial load performance
- Configuring for multi-env deployment
- Efficient database migrations

## Evolution of Decisions
- Switched to PostgreSQL in all stages
- Database schema optimized
- Potential shift toward OAuth or JWT for auth
- React confirmed for frontend
- React Query under evaluation
- Possible expansion of global state handling

## Cursor-Specific Rules

### Planning Mode
- Before proposing a plan:
  - Ask 4–6 clarifying questions
  - Read all memory-bank files
  - Validate with user
- Get approval before implementing any proposed plan

### Act Mode
- Always check and update `activeContext.md` and `progress.md` after any major change
- If new patterns emerge, update:
  - Memory Bank
  - `.cursorrules`

### When to Update Memory Bank
- Major architectural changes
- Introduction of new workflows or tools
- New known issues or solved challenges
- User requests via **"update memory bank"**